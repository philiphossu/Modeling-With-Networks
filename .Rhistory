#setwd("/IIT/Junior/Second Semester/CS422/Homework/CS422HW3/")
mammalsData <- fread("HartiganFile19.txt", header=TRUE, sep=" ")
HTRU_2 <- read.csv("HTRU_2-small.csv")
###2.3-a Perform PCA on the dataset
```{r}
###2.3-a Perform PCA on the dataset
```{r}
HTRU_2 <- read.csv("HTRU_2-small.csv")
pca.HTRU_2 <- prcomp(scale(HTRU_2))
pca.HTRU_2
summary(pca.HTRU_2)
col.pca <- c("green","blue")
biplot(pca.HTRU_2, scale=0)
biplot(pca.HTRU_2, scale=0)
ggplot(pca.HTRU_2$x[,1:2], aes(x = pca.HTRU_2$x[,1], y = pca.HTRU_2$x[,2]))
ggplot(pca.HTRU_2$x[,1:2], aes(x = pca.HTRU_2$x[,1], y = pca.HTRU_2$x[,2]),vertex.label=NA)
biplot(pca.HTRU_2, scale=0, vertex.label=NA)
biplot(pca.HTRU_2, scale=0, xlabs=NULL)
biplot(pca.HTRU_2, scale=0, xlabs=NULL)
biplot(pca.HTRU_2, scale=0, xlabs=NA)
biplot(pca.HTRU_2, scale=0, xlabs=0)
biplot(pca.HTRU_2, scale=0, xlabs="d")
biplot(pca.HTRU_2, scale=0)
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
getwd()
setwd("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/")
library('igraph')
library('zoom')
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citationVertices <- data.frame(vertices=unique(citationEdges[,1]))
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2])))
citationVertices <- rbind(citationVertices, firstVertex)
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges[,1:2], vertices=citationVertices, directed=T)
citationNetwork
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zm()
#Plotting the network
plot(citationNetwork, edge.arrow.size=1,vertex.size=1,margin=0, vertex.label=NA)
zm()
#Plotting the network
plot(citationNetwork, edge.arrow.size=0.1,vertex.size=1,margin=0, vertex.label=NA)
#Plotting the network
plot(citationNetwork, edge.arrow.size=0.4,vertex.size=1,margin=0, vertex.label=NA)
#Plotting the network
plot(citationNetwork, edge.arrow.size=0.2,vertex.size=1,margin=0, vertex.label=NA)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.4, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.3, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.1, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.01, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
sort(citationAlpha)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.99, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.01, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1 , weights = NULL, tol = 1e-07, sparse = TRUE)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
0.
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.1, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.1, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Plotting the network
plot(citationNetwork, edge.arrow.size=0.3,vertex.size=1,margin=0, vertex.label=NA)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.1, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.2, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.labels=NA,vertex.size=5,margin=0)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.labels=NA,vertex.size=5,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.labels=NA,vertex.size=5,margin=0)
zm()
library('igraph')
library(zoom)
# 511 x 1 column of objects where each object has first attribute of name, second attribute as a list of collaborators
processFile = function(filepath) {
# Current Main represents the Erdos1 collaborator
currentMain <- ""
df <- data.frame()
con = file(filepath, "r")
# Open file, read first main collaborator
line = readLines(con, n = 1)
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
currentMain <- paste(words <- temp[which(temp != '')], collapse = ' ')
while (TRUE) {
line = readLines(con, n = 1)
# print(line)
# If EOF, break
if (length(line) == 0) {
break
}
# If empty line, read next main collaborator
if (line == ''){
line = readLines(con, n = 1)
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
currentMain <- paste(words <- temp[which(temp != '')], collapse = ' ')
} else{
# Record Erdos2 collaborators and their corresponding main collaborator
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
words <- paste(words <- temp[which(temp != '')], collapse = ' ')
currentDF <- data.frame(currentMain,words)
df <- rbind(df,currentDF)
}
}
close(con)
# df column 1 = main collaborators (from), column 2 = secondary collaborators (to)
return(df)
}
result <- processFile("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/erdos1data.csv")
getwd()
result <- processFile("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/erdos1data.csv")
result <- processFile("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/erdos1data.csv")
getwd()
ls
result <- processFile("erdos1data.csv")
result
colnames(result) <- c("Main/From", "Secondary/To")
result <- processFile("erdos1data.csv")
#Paolo's path
result <- processFile("erdos1data.csv")
library('igraph')
#Paolo's path
result <- processFile("erdos1data.csv")
#Paolo's path
result <- processFile("erdos1data.csv")
on.exit(close(con))
#Paolo's path
result <- processFile("erdos1data.csv")
close(con)
library('igraph')
library(zoom)
# 511 x 1 column of objects where each object has first attribute of name, second attribute as a list of collaborators
processFile = function(filepath) {
# Current Main represents the Erdos1 collaborator
currentMain <- ""
df <- data.frame()
con = file(filepath, "r")
# Open file, read first main collaborator
line = readLines(con, n = 1)
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
currentMain <- paste(words <- temp[which(temp != '')], collapse = ' ')
while (TRUE) {
line = readLines(con, n = 1)
# print(line)
# If EOF, break
if (length(line) == 0) {
break
}
# If empty line, read next main collaborator
if (line == ''){
line = readLines(con, n = 1)
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
currentMain <- paste(words <- temp[which(temp != '')], collapse = ' ')
} else{
# Record Erdos2 collaborators and their corresponding main collaborator
words <- strsplit(line, " ")[[1]]
temp <- gsub('[0-9:* \"]+', '', words)
words <- paste(words <- temp[which(temp != '')], collapse = ' ')
currentDF <- data.frame(currentMain,words)
df <- rbind(df,currentDF)
}
}
on.exit(close(con))
# df column 1 = main collaborators (from), column 2 = secondary collaborators (to)
return(df)
}
# Result = data frame of all edges in the graph
#Phil's path
result <- processFile("~/Desktop/School/MATH380/Modeling-With-Networks/erdos1data.csv")
#Paolo's path
result <- processFile("erdos1data.csv")
#Paolo's path
result <- processFile("erdos1data.csv")
library('igraph')
library('zoom')
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citationVertices <- data.frame(vertices=unique(citationEdges[,1]))
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2])))
citationVertices <- rbind(citationVertices, firstVertex)
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges[,1:2], vertices=citationVertices, directed=T)
citationNetwork
#Plotting the network
plot(citationNetwork, edge.arrow.size=0.3,vertex.size=1,margin=0, vertex.label=NA)
zm()
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Total degree
totalCitationDegree <- degree(citationNetwork, v = V(citationNetwork), mode = c("all"), loops = TRUE, normalized = FALSE)
head(sort(totalCitationDegree, decreasing=TRUE))
hist(totalCitationDegree)
outDegree <- degree(network, v = V(network), mode = c("out"), loops = TRUE, normalized = FALSE)
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
library('igraph')
library('zoom')
#Reading the citationNetwork.csv file
citation_edges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citation_vertices <- data.frame(vertices=unique(citationEdges[,1]))
first_vertex <- data.frame(vertices=as.character(unlist(citation_edges[1,2])))
citation_vertices <- rbind(citation_vertices, first_vertex)
#Making the network
citation_network <- graph_from_data_frame(d=citation_edges[,1:2], vertices=citation_vertices, directed=T)
#Getting all the unique vertices
citation_vertices <- data.frame(vertices=unique(citation_edges[,1]))
first_vertex <- data.frame(vertices=as.character(unlist(citation_edges[1,2])))
citation_vertices <- rbind(citation_vertices, first_vertex)
#Making the network
citation_network <- graph_from_data_frame(d=citation_edges[,1:2], vertices=citation_vertices, directed=T)
citationNetwork
citation_network
length(V(citation_network)) # Number of vertices in the graph
length(E(citation_network)) # Number of edges in the graph
#Plotting the network
plot(citation_network, edge.arrow.size=0.3,vertex.size=1,margin=0, vertex.label=NA)
#Making the network
citation_network <- graph_from_data_frame(d=citation_edges[,1:2], vertices=citation_vertices, directed=T)
citation_network
length(V(citation_network)) # Number of vertices in the graph
length(E(citation_network)) # Number of edges in the graph
#Plotting the network
plot(citation_network, edge.arrow.size=0.3,vertex.size=1,margin=0, vertex.label=NA)
zm()
#Total degree
total_citation_degree <- degree(citation_network, v = V(citation_network), mode = c("all"), loops = TRUE, normalized = FALSE)
head(sort(total_citation_degree, decreasing=TRUE))
hist(total_citation_degree)
# Eigenvector Centrality
eigen_values <- eigen_centrality(citation_network)$vector
sort(eigen_values)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(50)[as.numeric(cut(eigenValues,breaks=50))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0,col=colorRange(50))
graphCol <- pal(50)[as.numeric(cut(eigenValues,breaks=50))]
graphCol <- pal(50)[as.numeric(cut(eigen_values,breaks=50))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0,col=colorRange(50))
zm()
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(50)[as.numeric(cut(eigen_values,breaks=50))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0,col=colorRange(50))
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0/)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citation_alpha <- alpha_centrality(citation_network, nodes = V(citation_network), alpha = 0.5, loops = FALSE, exo = 1)
sort(citationAlpha)
sort(citation_alpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
graphCol <- pal(5000)[as.numeric(cut(citation_alpha,breaks=5000))]
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citation_alpha,breaks=5000))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
length(V(citation_network)) # Number of vertices in the graph
length(E(citation_network)) # Number of edges in the graph
head(sort(total_citation_degree, decreasing=TRUE))
# Eigenvector Centrality
eigen_values <- eigen_centrality(citation_network)$vector
head(sort(eigen_values))
# Eigenvector Centrality
eigen_values <- eigen_centrality(citation_network)$vector
sort(eigen_values)
head(sort(eigen_values, decreasing = TRUE))
head(sort(total_citation_degree, decreasing=TRUE))
head(sort(eigen_values, decreasing=TRUE))
head(sort(citation_alpha, decreasing=TRUE))
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
zm()
#Creating the actorA - actorB dataframe
actorCollabDF <- data.frame(actorA=actorAList, actorB=actorBList)
#Reading the movie_metadata.csv file
movieData <- read.csv("movie_metadata.csv")
movieData <- read.csv("~/Desktop/School/Math380/Modeling-With-Networks/movie_metadata.csv")
#Reading the movie_metadata.csv file
movieData <- read.csv("movie_metadata.csv")
#Removing duplicate rows
movieData <- movieData[!duplicated(movieData),]
actorAList <- c()
actorBList <- c()
#For every row (movie) in the data
for (i in 1:nrow(movieData)){
actors <- movieData[i,]
#For every name (actor) in the row
for (j in 1:ncol(movieData[i,])){
#For every other name than j in the column
for (k in 1:ncol(movieData[i,])){
if(as.character(unlist(movieData[i,j])) != as.character(unlist(movieData[i,k]))){
#tempDF <- data.frame(actorA=as.character(unlist(movieData[i,j])),actorB=as.character(unlist(movieData[i,k])))
#actorCollabDF <- rbind(actorCollabDF, tempDF)
actorAList <- c(actorAList, as.character(unlist(movieData[i,j])))
actorBList <- c(actorBList, as.character(unlist(movieData[i,k])))
}
}
}
}
#Creating the actorA - actorB dataframe
actorCollabDF <- data.frame(actorA=actorAList, actorB=actorBList)
#Igraph
#Getting the nodes
actorsNodes <- unique(actorCollabDF$actorA)
#igraph?
actorsNetwork <- graph_from_data_frame(d=actorCollabDF, vertices=actorsNodes, directed=T)
actorsNetwork
#graph
plot(actorsNetwork, edge.arrow.size=.01, vertex.label=NA, vertex.size=1, margin=0)
zm() # Allows us to zoom but still not really usable
# Eigenvector Centrality
eigenValues <- eigen_centrality(actorsNetwork, scale=TRUE)
sort(eigenValues$vector, decreasing=TRUE)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(50)[as.numeric(cut(eigenValues$vector,breaks=50))]
plot(actorsNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
graphCol <- pal(5000)[as.numeric(cut(eigenValues$vector,breaks=5000))]
plot(actorsNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
# Eigenvector Centrality
eigenValues <- eigen_centrality(actorsNetwork)
sort(eigenValues$vector, decreasing=TRUE)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(eigenValues$vector,breaks=5000))]
graphCol
unique(graphCol)
plot(actorsNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
pal <- colorRampPalette(c("green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(eigenValues$vector,breaks=5000))]
plot(actorsNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=10,margin=0)
eigenValuesMean <- mean(eigenValues)
eigenValuesMean <- mean(eigenValues$vector)
eigenValuesSTD <- std(eigenValues$vector)
eigenValuesSTD <- sd(eigenValues$vector)
eigenValuesSD <- sd(eigenValues$vector)
eigenValues < (eigenValues - eigenValuesMean)/eigenValuesSD
eigenValues < (eigenValues$vector - eigenValuesMean)/eigenValuesSD
eigenValuesScaled <- scale(eigenValues)
eigenValuesScaled <- scale(eigenValues$vector)
graphCol <- pal(5000)[as.numeric(cut(eigenValuesScaled,breaks=5000))]
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(eigenValuesScaled,breaks=5000))]
plot(actorsNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
head(sort(citation_alpha, decreasing=TRUE))
# Eigenvector Centrality
eigen_values <- eigen_centrality(citation_network)$vector
head(sort(eigen_values, decreasing=TRUE))
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citation_alpha,breaks=5000))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(50)[as.numeric(cut(eigen_values,breaks=50))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
#Alpha centrality
citation_alpha <- alpha_centrality(citation_network, nodes = V(citation_network), alpha = 2, loops = FALSE, exo = 1)
head(sort(citation_alpha, decreasing=TRUE))
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citation_alpha,breaks=5000))]
#Alpha centrality
citation_alpha <- alpha_centrality(citation_network, nodes = V(citation_network), alpha = 0.5, loops = FALSE, exo = 1)
head(sort(citation_alpha, decreasing=TRUE))
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
#Alpha centrality
citation_alpha <- alpha_centrality(citation_network, nodes = V(citation_network), alpha = 0.5, loops = FALSE)
head(sort(citation_alpha, decreasing=TRUE))
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citation_alpha,breaks=5000))]
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
citation_alpha > 0.4
citation_alpha > 80
named <- subset(citation_alpha>80)
named <- subset(citation_alpha, citation_alpha>80)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
text(labels = named)
text(names, labels = named)
text(names, labels)
text(named, labels=names(named))
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
text(named, labels=names(named))
named <- subset(citation_alpha, citation_alpha>80)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
text(named, labels=names(named))
names(named)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.size=5,margin=0)
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.size=5,margin=0)
text(named, labels=names(named))
plot(citation_network, vertex.color=graphCol, edge.arrow.size=1, edge.size=NA,vertex.label=NA,vertex.size=5,margin=0)
text(named, labels=names(named))
