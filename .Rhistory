y <- c(3929000,5308000,7240000,9638000,12866000,17069000,23192000,31443000,38558000,50156000,62948000,75995000, 91972000,105711000,122755000,131669000,150697000,179323000,203212000,226505000,248710000,281416000)
modelPop <- function(t){
return <- 250000000/(1+exp(-0.03108*(t-1915.807)))
}
currentT = 1960
df <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(df) <- c("year", "Observed population", "Predicted population")
currentT = currentT + 10
while (currentT <= 2000){
dfe <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(dfe) <- c("year", "Observed population", "Predicted population")
df <- rbind(df, dfe)
currentT <- currentT + 10
}
df
rm(list=ls())
x <- c(1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950)
y <- c(3929000,5308000,7240000,9638000,12866000,17069000,23192000,31443000,38558000,50156000,62948000,75995000, 91972000,105711000,122755000,131669000,150697000)
newY = log(y/(250000000-y))
plot(x,newY,xlab="t",ylab="lny(P/(M-P)")
model11_1_4 <- lm(newY ~ x)
model11_1_4
plot(x,newY,xlab="t",ylab="lny(P/(M-P)")
abline(-55.45581,0.02872)
tstar <- x[1] - ((1/0.03108)*log(y[1]/(250000000-y[1])))
tstar
x <- c(1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950,1960,1970,1980,1990,2000)
y <- c(3929000,5308000,7240000,9638000,12866000,17069000,23192000,31443000,38558000,50156000,62948000,75995000, 91972000,105711000,122755000,131669000,150697000,179323000,203212000,226505000,248710000,281416000)
modelPop <- function(t){
return <- 250000000/(1+exp(-0.03108*(t-1915.807)))
}
currentT = 1960
df <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(df) <- c("year", "Observed population", "Predicted population")
currentT = currentT + 10
while (currentT <= 2000){
dfe <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(dfe) <- c("year", "Observed population", "Predicted population")
df <- rbind(df, dfe)
currentT <- currentT + 10
}
df
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif()
Y <- runif()
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 100 is",section5_3(1000))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 100 is",section5_3(1000))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 10 is",section5_3(10))
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
paste("The probability that player 1 wins for n = 1000 is",section5_3(1000))
paste("The probability that player 1 wins for n = 10000 is",section5_3(10000))
section5_3 <- function(n){
p1 = 0
p2 = 0
for (i in 1:n){
X <- runif(1)
Y <- runif(1)
p1_call <- "even"
if (p1_call == "even"){
if ((X<=0.5 && Y<=0.5) || (X>0.5 && Y>0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
if (p1_call == "odd"){
if ((X<=0.5 && Y>0.5) || (X>0.5 && Y<=0.5))
p1 = p1 + 1
else
p2 = p2 + 1
}
}
return <- p1/(p1+p2)
}
paste("The probability that player 1 wins for n = 10 is",section5_3(10))
paste("The probability that player 1 wins for n = 100 is",section5_3(100))
paste("The probability that player 1 wins for n = 1000 is",section5_3(1000))
paste("The probability that player 1 wins for n = 10000 is",section5_3(10000))
rm(list=ls())
x <- c(1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950)
y <- c(3929000,5308000,7240000,9638000,12866000,17069000,23192000,31443000,38558000,50156000,62948000,75995000, 91972000,105711000,122755000,131669000,150697000)
newY = log(y/(250000000-y))
plot(x,newY,xlab="t",ylab="lny(P/(M-P)")
model11_1_4 <- lm(newY ~ x)
model11_1_4
plot(x,newY,xlab="t",ylab="lny(P/(M-P)")
abline(-55.45581,0.02872)
tstar <- x[1] - ((1/0.03108)*log(y[1]/(250000000-y[1])))
tstar
x <- c(1790,1800,1810,1820,1830,1840,1850,1860,1870,1880,1890,1900,1910,1920,1930,1940,1950,1960,1970,1980,1990,2000)
y <- c(3929000,5308000,7240000,9638000,12866000,17069000,23192000,31443000,38558000,50156000,62948000,75995000, 91972000,105711000,122755000,131669000,150697000,179323000,203212000,226505000,248710000,281416000)
modelPop <- function(t){
return <- 250000000/(1+exp(-0.03108*(t-1915.807)))
}
currentT = 1960
df <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(df) <- c("year", "Observed population", "Predicted population")
currentT = currentT + 10
while (currentT <= 2000){
dfe <- data.frame(currentT, y[(currentT-1790)/10 + 1], modelPop(currentT) )
names(dfe) <- c("year", "Observed population", "Predicted population")
df <- rbind(df, dfe)
currentT <- currentT + 10
}
df
diffeq_6 <- function(X){X(1000-X)}
plot(eq(1:1000), type='l')
plot(diffeq_6(1:1000), type='l')
diffeq_6 <- function(X){X*(1000-X)}
diffeq_6 <- function(X){X*(1000-X)}
plot(diffeq_6(1:1000), type='l')
diffeq_6 <- function(X){X*2*(1000-X)}
plot(diffeq_6(1:1000), type='l')
diffeq_6 <- function(X){X*(1000-X)}
plot(diffeq_6(1:1000), type='l')
plot(diffeq_6(1:2000), type='l')
plot(diffeq_6(1:1000), type='l')
library(fpc)
library(factoextra)
library(dbscan)
install.packages("fpc")
install.packages("factoextra")
install.packages("dbscan")
library(fpc)
library(factoextra)
library(dbscan)
set.seed(123)
rm(list=ls())
data("multishapes", package = "factoextra")
df <- multishapes[, 1:2]
plot(df, main="Raw points before DBSCAN")
df <- multishapes[, 1:2]
library(fpc)
library(data.table)
install.packages("data.table")
library(data.table)
library(factoextra)
install.packages("ggplot2")
library(data.table)
library(factoextra)
library(data.table)
library(factoextra)
library(data.table)
library(factoextra)
library(cluster)
library(ggplot2)
library(factoextra)
install.packages("factoextra")
library(data.table)
library(factoextra)
library(factoextra)
library(ggplot2)
install.packages("colorspace")
library(data.table)
library(factoextra)
library(factoextra)
library(cluster)
library(ggplot2)
rm(list=ls())
library(data.table)
library(factoextra)
library(cluster)
library(ggplot2)
#setwd("/IIT/Junior/Second Semester/CS422/Homework/CS422HW3/")
mammalsData <- fread("HartiganFile19.txt", header=TRUE, sep=" ")
HTRU_2 <- read.csv("HTRU_2-small.csv")
###2.3-a Perform PCA on the dataset
```{r}
###2.3-a Perform PCA on the dataset
```{r}
HTRU_2 <- read.csv("HTRU_2-small.csv")
pca.HTRU_2 <- prcomp(scale(HTRU_2))
pca.HTRU_2
summary(pca.HTRU_2)
col.pca <- c("green","blue")
biplot(pca.HTRU_2, scale=0)
biplot(pca.HTRU_2, scale=0)
ggplot(pca.HTRU_2$x[,1:2], aes(x = pca.HTRU_2$x[,1], y = pca.HTRU_2$x[,2]))
ggplot(pca.HTRU_2$x[,1:2], aes(x = pca.HTRU_2$x[,1], y = pca.HTRU_2$x[,2]),vertex.label=NA)
biplot(pca.HTRU_2, scale=0, vertex.label=NA)
biplot(pca.HTRU_2, scale=0, xlabs=NULL)
biplot(pca.HTRU_2, scale=0, xlabs=NULL)
biplot(pca.HTRU_2, scale=0, xlabs=NA)
biplot(pca.HTRU_2, scale=0, xlabs=0)
biplot(pca.HTRU_2, scale=0, xlabs="d")
biplot(pca.HTRU_2, scale=0)
setwd("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/")
library('igraph')
#Reading the movie_metadata.csv file
citationNetwork <- read.csv("citationNetwork.csv")
View(citationNetwork)
citationVertex <- unique(citationNetwork[,1])
citationVertex
citationNetwork[1,2]
citationVertex <- c(citationNetwork[1,2], unique(citationNetwork[,1]))
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertex, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
alpha_centrality(citationNetwork, nodes = citationVertex, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
library(readr)
citationEdges <- read_csv("citationNetwork.csv")
citationEdges <- read.csv("citationNetwork.csv")
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citationVertices <- c(citationNetwork[1,2], unique(citationNetwork[,1]))
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges, vertices=citationVertices, directed=T)
citationNetwork
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertex, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges, vertices=citationVertices, directed=T)
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges, vertices=citationVertices, directed=T)
citationVertices
rm(list = ())
# Messy plot
plot(cite_network,vertex.label=NA,vertex.size=4,margin=0,edge.arrow.size=0.2)
zm()
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citationVertices <- c(citationNetwork[1,2], unique(citationNetwork[,1]))
#Getting all the unique vertices
citationVertices <- c(citationEdges[1,2], unique(citationEdges[,1]))
citationVertices
View(citationEdges)
#Getting all the unique vertices
citationVertices <-  unique(citationEdges[,1])
citationVertices
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges, vertices=citationVertices, directed=T)
#Getting all the unique vertices
citationVertices <- c(unique(citationEdges[,1]), citationEdges[1,2])
citationEdges[1,2]
setwd("IIT/Junior/Second Semester/MATH380/Modeling-With-Networks/")
library('igraph')
#Reading the citationNetwork.csv file
citationEdges <- read.csv("citationNetwork.csv")
#Getting all the unique vertices
citationVertices
#Getting all the unique vertices
citationVertices <- c(unique(citationEdges[,1]), c itation
#Getting all the unique vertices
citationVertices <- unique(citationEdges[,1]
#Getting all the unique vertices
citationVertices <- unique(citationEdges[,1])
#Getting all the unique vertices
citationVertices <- unique(citationEdges[,1])
citationVertices
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges, vertices=citationVertices, directed=T)
citationVertices <- c(citationVertices,citationEdges[1,2])
View(citationEdges)
#Getting all the unique vertices
citationVertices <- unique(citationEdges[,1])
citationVertices <- c(citationVertices,citationEdges[1,2])
#Getting all the unique vertices
citationVertices <- unique(citationEdges[,1])
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges[,1:2], vertices=citationVertices, directed=T)
#Getting all the unique vertices
citationVertices <- data.frame(unique(citationEdges[,1]))
View(citationVertices)
#Getting all the unique vertices
citationVertices <- data.frame(vertices=unique(citationEdges[,1]))
View(citationVertices)
firstVertex <- data.frame(vertices=citationEdges[1,2])
citationEdges[1]
citationEdges[1,2]
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2]))
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2])
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2])))
firstVertex <- data.frame(vertices=as.character(unlist(citationEdges[1,2])))
citationVertices <- rbind(citationVertices, firstVertex)
View(citationVertices)
#Making the network
citationNetwork <- graph_from_data_frame(d=citationEdges[,1:2], vertices=citationVertices, directed=T)
citationNetwork
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0)
zm()
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, labels=NA)
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.labels=NA)
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.labels=NA)
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zm()
install.packages("zm")
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertex, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
citationEdges[1,2]
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertex, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertices, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertices, alpha = 1, loops = FALSE, exo = 1, weights = NULL, tol = 1e-07, sparse = TRUE)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertices, alpha = 1, loops = FALSE, exo = 1)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertices, alpha = 1, loops = FALSE, exo = 1)
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zm()
install.packages("zoom")
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zm()
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zoom()
library('zoom')
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
zm()
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.labels=NA)
zm()
#Alpha centrality
alpha_centrality(citationNetwork, nodes = citationVertices, alpha = 1, loops = FALSE, exo = 1)
names(citationNetwork)
#Alpha centrality
alpha_centrality(citationNetwork, alpha = 1, loops = FALSE, exo = 1)
#Alpha centrality
alpha_centrality(citationNetwork, alpha = 1, loops = TRUE, exo = 1)
#Alpha centrality
alpha_centrality(citationNetwork, alpha = 1, loops = TRUE, exo = 1)
#Alpha centrality
alpha_centrality(citationNetwork, alpha = 1, loops = FALSE, exo = 1)
#Plotting the network
plot(citationNetwork, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
as.list(citationVertices)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = as.list(citationVertices), alpha = 1, loops = FALSE, exo = 1)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 1, loops = FALSE, exo = 1)
V(citationNetwork)
try <- ""
length(try)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 1, loops = FALSE, exo = 1)
sum(degree(citationNetwork))
sum(degree(citationNetwork) <1)
sum(degree(citationNetwork) < 1)
#Alpha centrality
alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
#Alpha centrality
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
plot(citationAlpha, edge.arrow.size=.01,vertex.size=1,margin=0, vertex.label=NA)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(500)[as.numeric(cut(citationAlpha,breaks=500))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0,col=colorRange(500))
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
zm()
citationAlpha <- sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(500)[as.numeric(cut(citationAlpha,breaks=500))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
zm()
citationAlpha <- alpha_centrality(citationNetwork, nodes = V(citationNetwork), alpha = 0.9, loops = FALSE, exo = 1)
sort(citationAlpha)
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(500)[as.numeric(cut(citationAlpha,breaks=500))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
zm()
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.labels=NA,vertex.size=1,margin=0)
zm()
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.labels=NA,vertex.size=1,margin=0)
zm()
pal <- colorRampPalette(c("blue","green","yellow","orange","red"))
graphCol <- pal(5000)[as.numeric(cut(citationAlpha,breaks=5000))]
plot(citationNetwork, vertex.color=graphCol, edge.arrow.size=.001, edge.size=NA,vertex.label=NA,vertex.size=1,margin=0)
zm()
